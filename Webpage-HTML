<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Programming Quiz</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
    }

    .quiz-container {
      max-width: 600px;
      margin: 0 auto;
    }

    .question {
      margin-bottom: 10px;
    }

    .options {
      margin-bottom: 20px;
    }

    #result {
      margin-top: 20px;
    }

    /* Add a class to highlight correct and incorrect answers */
    .correct {
      color: green;
    }

    .incorrect {
      color: red;
    }
  </style>
</head>
<body>

<div class="quiz-container">
  <h1>Programming Quiz</h1>

  <div id="quiz">
    <div class="question">
      <label for="language">Select a language:</label>
      <select id="language">
        <option value="python">Python</option>
        <option value="java">Java</option>
      </select>
    </div>

    <div class="question">
      <label for="difficulty">Select a difficulty level:</label>
      <select id="difficulty">
        <option value="easy">Easy</option>
        <option value="medium">Medium</option>
        <option value="hard">Hard</option>
      </select>
    </div>

    <div id="questions" class="question"></div>

    <div class="options">
      <button onclick="generateQuiz()">Start Quiz</button>
    </div>

    <div id="result"></div>
  </div>
</div>

<script>
  const pythonQuestions = {
    easy: [
      {
        text: "What does the `print()` function do in Python?",
        options: ["Display a message on the screen.", "Add two numbers.", "Create a variable.", "Define a function."],
        correct: 0
      },
      {
        text: "How do you comment a single line in Python?",
        options: ["// Comment", "/* Comment */", "# Comment", "~ Comment"],
        correct: 2
      },
      {
        text: "What is the purpose of the `len()` function in Python?",
        options: ["Convert to lowercase.", "Get the length of a sequence.", "Concatenate strings.", "Find the maximum value."],
        correct: 1
      },
      {
        text: "Which data type is used to store a single character in Python?",
        options: ["char", "str", "int", "float"],
        correct: 1
      },
      {
        text: "How do you define an empty list in Python?",
        options: ["list()", "emptyList[]", "[]", "new list()"],
        correct: 2
      }
    ],
    medium: [
      {
        text: "What is the result of `3 // 2` in Python?",
        options: ["1.5", "1", "2.0", "0.5"],
        correct: 1
      },
      {
        text: "What is the purpose of the `elif` keyword in Python?",
        options: ["Start a loop.", "Define a class.", "Handle multiple conditions.", "Import a module."],
        correct: 2
      },
      {
        text: "What does the `range(3)` function produce?",
        options: ["[0, 1, 2, 3]", "[1, 2, 3]", "[0, 1, 2]", "(0, 1, 2)"],
        correct: 2
      },
      {
        text: "How do you open a file in Python for writing?",
        options: ["file = open(\"filename.txt\", \"r\")", "file = open(\"filename.txt\", \"w\")", "file = open(\"filename.txt\", \"a\")", "file = open(\"filename.txt\", \"x\")"],
        correct: 1
      },
      {
        text: "What is the purpose of the `__init__` method in a Python class?",
        options: ["Initialize a variable.", "Define a class attribute.", "Create an instance of the class.", "Implement a destructor."],
        correct: 2
      }
    ],
    hard: [
      {
        text: "What is the Global Interpreter Lock (GIL) in CPython?",
        options: ["A tool for code profiling.", "A mechanism to prevent multiple interpreters.", "A feature for dynamic typing.", "A memory management technique."],
        correct: 1
      },
      {
        text: "What is the purpose of the `__slots__` attribute in a Python class?",
        options: ["Define class constants.", "Restrict the attributes of instances.", "Enable multiple inheritance.", "Specify the default values for attributes."],
        correct: 1
      },
      {
        text: "How can you handle exceptions in Python?",
        options: ["Using `if-else` statements.", "Using `try-except` blocks.", "Using `switch` statements.", "Using `finally` blocks."],
        correct: 1
      },
      {
        text: "What is the purpose of the `lambda` function in Python?",
        options: ["Define a constant.", "Create an anonymous function.", "Import a module.", "Implement recursion."],
        correct: 1
      },
      {
        text: "How does Python's garbage collection work?",
        options: ["Manual memory management.", "Reference counting.", "Stack-based allocation.", "Persistent memory allocation."],
        correct: 1
      }
    ]
  };

  const javaQuestions = {
    easy: [
      {
        text: "What is the entry point of a Java program?",
        options: ["main()", "start()", "execute()", "begin()"],
        correct: 0
      },
      {
        text: "How do you declare a variable in Java?",
        options: ["variable x;", "var x;", "int x;", "x = new Variable();"],
        correct: 2
      },
      {
        text: "What is the purpose of the `System.out.println()` statement in Java?",
        options: ["Print a message to the console.", "Perform a mathematical operation.", "Define a constant.", "Create an object."],
        correct: 0
      },
      {
        text: "How do you initialize an array in Java?",
        options: ["int[] arr = new int[];", "arr[] = new int[];", "int[] arr = {};", "int[] arr = new int[5];"],
        correct: 3
      },
      {
        text: "What is the keyword used for inheritance in Java?",
        options: ["extend", "inherits", "implements", "classof"],
        correct: 0
      }
    ],
    medium: [
      {
        text: "What is the difference between `==` and `equals()` in Java for comparing objects?",
        options: ["They are identical.", "`==` compares memory references; `equals()` compares content.", "`==` compares content; `equals()` compares memory references.", "Both compare content."],
        correct: 1
      },
      {
        text: "What is the purpose of the `super` keyword in Java?",
        options: ["Call a superclass method.", "Create a new object.", "Declare a constant.", "Access a static method."],
        correct: 0
      },
      {
        text: "How is a multi-threaded environment achieved in Java?",
        options: ["Using `if-else` statements.", "Using `try-catch` blocks.", "Implementing the `Runnable` interface or extending the `Thread` class.", "Using `break` statements."],
        correct: 2
      },
      {
        text: "What is the purpose of the `finally` block in a `try-catch-finally` statement?",
        options: ["Handle exceptions.", "Execute code regardless of exceptions.", "Skip the catch block.", "Define global variables."],
        correct: 1
      },
      {
        text: "How do you declare an interface in Java?",
        options: ["interface MyInterface {}", "class MyInterface {}", "interface = MyInterface {}", "new interface MyInterface {}"],
        correct: 0
      }
    ],
    hard: [
      {
        text: "What is the Java Virtual Machine (JVM), and why is it used?",
        options: ["A tool for debugging.", "A compiler for Java code.", "A runtime environment for executing Java bytecode.", "A garbage collector."],
        correct: 2
      },
      {
        text: "Explain the concept of method overloading in Java.",
        options: ["Defining a method in a subclass with the same name as in the superclass.", "Providing multiple implementations of a method with different parameters in the same class.", "Calling a method from another method.", "Overriding a method in a subclass."],
        correct: 1
      },
      {
        text: "What is the purpose of the `this` keyword in Java?",
        options: ["Reference to the current class instance.", "Reference to the superclass.", "Reference to the calling method.", "Reference to a static variable."],
        correct: 0
      },
      {
        text: "How is encapsulation achieved in Java?",
        options: ["Using access modifiers (public, private, protected).", "Implementing interfaces.", "Declaring static methods.", "Using the `final` keyword."],
        correct: 0
      },
      {
        text: "What is the purpose of the `volatile` keyword in Java?",
        options: ["Make a variable unchangeable.", "Enable thread-safe access to a variable.", "Declare a constant.", "Implement lazy loading."],
        correct: 1
      }
    ]
  };
  javascript
  function generateQuiz() {
    const language = document.getElementById("language").value;
    const difficulty = document.getElementById("difficulty").value;

    const questions = getQuestions(language, difficulty);

    displayQuestions(questions);
    // Hide the "Start Quiz" button after it is clicked
    document.querySelector(".options button").style.display = "none"; 
  }

  function getQuestions(language, difficulty) {
    return language === "python" ? pythonQuestions[difficulty] : javaQuestions[difficulty];
  }

  function displayQuestions(questions) {
    const questionsContainer = document.getElementById("questions");
    questionsContainer.innerHTML = "";

    questions.forEach((question, index) => {
      const questionElement = document.createElement("div");
      questionElement.innerHTML = `<p>${index + 1}. ${question.text}</p>`;
      questionElement.innerHTML += createOptions(question.options, index);
      questionsContainer.appendChild(questionElement);
    });

    // Move the "Submit" button outside the questions container
    questionsContainer.innerHTML += '<button onclick="submitQuiz()">Submit</button>';
  }

  function createOptions(options, questionIndex) {
    let optionsHtml = "";
    options.forEach((option, index) => {
      optionsHtml += `
        <label>
          <input type="radio" name="q${questionIndex}" value="${index}">
          ${option}
        </label><br>`;
    });
    return optionsHtml;
  }

  function submitQuiz() {
    const questions = document.getElementById("questions");
    const resultContainer = document.getElementById("result");

    let correctCount = 0;
    questions.querySelectorAll("div").forEach((questionElement, index) => {
      const selectedOption = questionElement.querySelector(`input[name="q${index}"]:checked`);
      if (selectedOption) {
        const selectedValue = parseInt(selectedOption.value, 10);
        if (selectedValue === getCorrectAnswer(index)) {
          correctCount++;
          // Highlight correct answers
          questionElement.classList.add("correct");
        } else {
          // Highlight incorrect answers
          questionElement.classList.add("incorrect");
        }
      }
    });

    resultContainer.innerHTML = `<p>You answered ${correctCount} out of ${questions.childElementCount} questions correctly.</p>`;
  }

  function getCorrectAnswer(questionIndex) {
    const language = document.getElementById("language").value;
    const difficulty = document.getElementById("difficulty").value;
    const questions = getQuestions(language, difficulty);
    return questions[questionIndex].correct;
  }
</script>
</body>
</html>

